{"mappings":"mkBAAA,aACAA,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAyBC,EAAKC,EAAKH,GAC3BG,KAAOD,EACPN,OAAOC,eAAeK,EAAKC,EAAK,CAC5BH,MAAOA,EACPI,YAAY,EACZC,cAAc,EACdC,UAAU,IAGdJ,EAAIC,GAAOH,EAEf,OAAOE,C,cCfXN,OAAOC,eAAeU,EAAS,aAAc,CACzCP,OAAO,IAEXO,EAAQN,QAER,SAAuBO,GACnB,IAAI,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAI,CACrC,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAC/CI,EAAUjB,OAAOkB,KAAKF,GACkB,mBAAjChB,OAAOmB,wBACdF,EAAUA,EAAQG,OAAOpB,OAAOmB,sBAAsBH,GAAQK,QAAO,SAASC,GAC1E,OAAOtB,OAAOuB,yBAAyBP,EAAQM,GAAKd,U,MAG5DS,EAAQO,SAAQ,SAASjB,GACrBkB,EAAqBpB,QAAQO,EAAQL,EAAKS,EAAOT,G,IAGzD,OAAOK,C,EAdX,IAgBgCN,EAhB5BmB,GAgB4BnB,EAhBaoB,EAAA,WAiB3BpB,EAAIqB,WAAarB,EAAM,CACjCD,QAASC,GCXjB,IAAMsB,EAAa,CACjBC,OAAQ,CACN,CACEC,GAAI,GACJC,KAAM,UAER,CACED,GAAI,GACJC,KAAM,aAER,CACED,GAAI,GACJC,KAAM,WAER,CACED,GAAI,IACJC,KAAM,mBAER,CACED,GAAI,GACJC,KAAM,YAER,CACED,GAAI,MACJC,KAAM,OAER,CACED,GAAI,GACJC,KAAM,aAwBNC,EAnBQ,CACZ,CACEC,MAAO,cACPC,SAAU,CAAC,GAAI,GAAI,KAErB,CACED,MAAO,8CACPC,SAAU,CAAC,GAAI,GAAI,KAErB,CACED,MAAO,kBACPC,SAAU,CAAC,GAAI,KAEjB,CACED,MAAO,0BACPC,SAAU,CAAC,IAAK,GAAI,GAAI,MAIJC,KAAI,SAACC,GAC3B,OAAOC,EAAA1B,EAAA,IAAKyB,EAAI,CAAEE,WAAY,I,IAGhCN,EAAUG,KAAI,SAAAI,G,IAAGL,EAAQK,EAARL,SAAUI,EAAUC,EAAVD,WACzBV,EAAWC,OAAOM,KAAI,SAACK,GACrBN,EAASV,SAAQ,SAACiB,EAAIC,GAChBD,IAAOD,EAAKV,KACdQ,EAAWI,GAAQF,EAAKT,K,UAMhC,IAAMY,EAAOC,SAASC,cAAc,UAE9BC,EAASd,EACZG,KAAI,SAAAI,EAAwBT,G,IAArBQ,EAAUC,EAAVD,WAAYL,EAAKM,EAALN,MACZJ,EACJS,EAAWvB,OAAS,EAChBuB,EAAWS,MAAM,EAAG,GAAGC,KAAK,MAAQ,WACpCV,EAAWU,KAAK,MAEtB,MAAO,6BAED5B,OADJU,EAAK,EACN,OAAeV,OAAVa,EAAM,MAAWb,OAAPS,EAAO,e,IAExBmB,KAAK,IAERL,EAAKM,mBAAmB,YAAaH,E","sources":["node_modules/@swc/helpers/lib/_define_property.js","node_modules/@swc/helpers/lib/_object_spread.js","src/js/task-02-films.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _objectSpread;\nvar _defineProperty = _interopRequireDefault(require(\"./_define_property\"));\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === 'function') {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            (0, _defineProperty).default(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","// Представлений масив фільмів (films) кожен елемент масиву являється об'єктом в якого є назва фільму та масив з жанрами до яких він відноситься, але в масиві (genreIDs) тільки ID цих фільмів.\n// Потрібно в кожен об'єкт додати ключ genreNames який буде масивом з назвами жанрів до яких цей фільм відноситься. Після чого відрендерити список фільмів як наведено в прикладі нижче (Expected result), якщо в списку жанрів більш ніж 2 фільми тоді рендеримо назву перших двох жанрів, а всі інші замінюємо на \"Others\".\n// Співвідношення ID жанру та назви жанру знаходиться в об'єкті genresInfo.\n\n//  Expected result\n// Films list:\n// 1. 'Interceptor: Action, Thriller, Others.'\n// 2. 'Fantastic Beasts: The Secrets of Dumbledore: Fantasy, Adventure, Others.'\n// 3. 'Last Seen Alive: Action, Thriller.'\n// 4. 'Jurassic World Dominion: Science Fiction, Action, Others.'\n\n\nconst genresInfo = {\n  genres: [\n    {\n      id: 28,\n      name: \"Action\",\n    },\n    {\n      id: 12,\n      name: \"Adventure\",\n    },\n    {\n      id: 14,\n      name: \"Fantasy\",\n    },\n    {\n      id: 878,\n      name: \"Science Fiction\",\n    },\n    {\n      id: 53,\n      name: \"Thriller\",\n    },\n    {\n      id: 10752,\n      name: \"War\",\n    },\n    {\n      id: 37,\n      name: \"Western\",\n    },\n  ],\n};\n\nconst films = [\n  {\n    title: \"Interceptor\",\n    genreIDs: [28, 53, 12],\n  },\n  {\n    title: \"Fantastic Beasts: The Secrets of Dumbledore\",\n    genreIDs: [14, 12, 28],\n  },\n  {\n    title: \"Last Seen Alive\",\n    genreIDs: [28, 53],\n  },\n  {\n    title: \"Jurassic World Dominion\",\n    genreIDs: [878, 28, 12, 53],\n  },\n];\n\nconst filmsList = films.map((film) => {\n  return { ...film, genreNames: [] };\n});\n\nfilmsList.map(({ genreIDs, genreNames }) => {\n  genresInfo.genres.map((item) => {\n    genreIDs.forEach((el, elId) => {\n      if (el === item.id) {\n        genreNames[elId] = item.name;\n      }\n    });\n  });\n});\n\nconst list = document.querySelector(\"#films\");\n\nconst markup = filmsList\n  .map(({ genreNames, title }, id) => {\n    const genres =\n      genreNames.length > 2\n        ? genreNames.slice(0, 2).join(\", \") + \", Others\"\n        : genreNames.join(\", \");\n\n    return `<li class=\"films-item\"><p>${\n      id + 1\n    }. \"${title}: ${genres}.\"</p> </li>`;\n  })\n  .join(\"\");\n\nlist.insertAdjacentHTML(\"beforeend\", markup);\n"],"names":["Object","defineProperty","module","exports","value","default","obj","key","enumerable","configurable","writable","$9eddae5a012cde57$exports","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","$9eddae5a012cde57$var$_defineProperty","parcelRequire","__esModule","$d18248c88806f682$var$genresInfo","genres","id","name","$d18248c88806f682$var$filmsList","title","genreIDs","map","film","$parcel$interopDefault","genreNames","param","item","el","elId","$d18248c88806f682$var$list","document","querySelector","$d18248c88806f682$var$markup","slice","join","insertAdjacentHTML"],"version":3,"file":"task-02-films.5be8c4c9.js.map"}